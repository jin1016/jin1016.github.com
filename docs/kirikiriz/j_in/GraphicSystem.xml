<?xml version="1.0" encoding="Shift_JIS" ?>
<doc>
<title>グラフィックシステム</title>

<para>
<ptitle>グラフィックシステムについて</ptitle>
　吉里吉里は、レイヤによるグラフィックの表示機構を持っています。<r/>
　各レイヤはアルファブレンドによる透過重ね合わせや階層構造管理機能を持っています。また、レイヤを GUI 部品 (ウィジット) として動作させることができるように、ユーザからの入力を受け取るための機構 ( フォーカス ) を持っています。<r/>
<r/>
　重ね合わされたレイヤは、描画デバイスと呼ばれる機構にて、ウィンドウに描画されます。デフォルトでは PassThroughと呼ばれる、単純にレイヤの出力をウィンドウに描画するだけのデバイスが使用されます。描画デバイスは<at href="f_Window_drawDevice.html">Window.drawDevice</at>プロパティを操作することで自由に差し替えられるようになっており、用途に応じた演出効果などをユーザが独自に(プラグインの形式で)定義することとができますが、吉里吉里２が内蔵しているのは前述のPassThroughデバイスのみです。
</para>

<para>
<ptitle>読み込み可能な画像形式</ptitle>
　標準状態の吉里吉里で、<at href="f_Layer_loadImages.html">Layer.loadImages</at> でレイヤに読み込むことのできる形式は以下の通りです。<r/>
<r/>
<dl>
<dt>BMP</dt>
<dd>
　Windows 標準のビットマップ形式です。32 bpp の BMP はアルファチャネル付きビットマップと見なされます。<r/>
　RLE圧縮されたビットマップは読み込むことができません。
</dd>

<dt>PNG</dt>
<dd>
　Portable Network Graphic 形式を読み込むことができます。アルファチャネル付きビットマップ PNG も読み込むことができます。
</dd>

<dt>JPEG</dt>
<dd>
　JPEG 形式を読み込むことができます。算術圧縮されたものや可逆圧縮のものは読み込むことができませんが、そもそも滅多に見かけないのでかまわないかと思います。
</dd>

<dt>ERI</dt>
<dd>
　L.Entis 氏の提唱する可逆圧縮フォーマットです。アルファチャネル付きのものも読み込むことができます。
</dd>

<dt>TLG5</dt>
<dd>
　吉里吉里独自の可逆圧縮フォーマットです。拡張子は .tlg です。アルファチャネル付きのものも読み込むことができます。圧縮率はさほど高くありませんが、高速に展開できるのが特徴です。この形式は<b>マスク画像(_m) あるいは領域画像 (_p) に使用することはできません</b>。アルファチャンネル無しのフルカラー画像、あるいはアルファチャンネル付きのフルカラー画像のみを扱うことができます。
</dd>

<dt>TLG6</dt>
<dd>
　吉里吉里独自の可逆圧縮フォーマットです。拡張子はTLG5と同じく .tlg です。TLG6は高い圧縮率が特徴です。展開速度はTLG5の２倍弱かかりますが、それでもPNGの２倍以上高速に展開でき、サイズもPNGより2〜4割小さくなります。
</dd>

<dt>メイン/マスク分離形式</dt>
<dd>
　メイン/マスク分離形式は、色情報の画像(メイン) とアルファチャネル(マスク) の画像が分離している形式で、マスク画像は、メイン画像のファイル名に _m が付加されたものとなります ( たとえば、abc.jpeg に対して abc_m.jpeg )。<r/>
　メイン/マスク画像の形式が異なっていてもかまいません。
</dd>
</dl>
<r/>
　その他、Susie Plug-in を使って読み込み可能な画像形式を増やすことができます。Susie plug-in は <at href="f_Plugins_link.html">Plugins.link</at> メソッドで読み込むことができます。<r/>
　Susie Plug-in から 32bpp のビットマップが渡された場合は、アルファチャネル付きビットマップと見なされます。<r/>
<r/>
</para>

<para>
<ptitle>レイヤタイプ</ptitle>
　吉里吉里のレイヤは様々な合成モード(レイヤタイプ)で表示することができます。<r/>
　以下の合成モードがあり、lt で始まるレイヤタイプ定数を <at href="f_Layer_type.html">Layer.type</at> プロパティに指定することができます。<r/>
　なお、式中の <i>result</i> は結果、<i>dest</i> は重ね合わせ先の画像の輝度、<i>src</i> は重ね合わせる画像の輝度、<i>α</i>は重ね合わせる画像のピクセルごとのアルファ値で、すべて値の範囲は 0.0 〜 1.0 とします。<r/>
　また、ここでは説明のために以下の関数を定義します。<r/>
<ul>
<li>abs(<i>a</i>) : <i>a</i> の絶対値</li>
<li>max(<i>a</i>, <i>b</i>) : <i>a</i> と <i>b</i> のどちらか大きい方</li>
<li>min(<i>a</i>, <i>b</i>) : <i>a</i> と <i>b</i> のどちらか小さい方</li>
<li>blend(<i>a</i>, <i>b</i>, <i>r</i>) = <i>a</i> × (1.0 - <i>r</i>) + <i>b</i> × <i>r</i></li>
</ul>

<r/>

<dl>

<dt><kw>ltOpaque</kw> (<kw>ltCoverRect</kw>)</dt>
<dd>
　ltOpaque は透過を伴わない表示です。常にレイヤの矩形全体が完全不透明な表示になります ( このレイヤタイプに限りませんが、<at href="f_Layer_opacity.html">Layer.opacity</at> で不透明度を下げている場合はそれに従います )。<r/>
<r/>
式 : <i>result</i> = <i>src</i><r/>
<note>
ltCoverRect でも同じ意味になりますが、2.23 beta 2 未満における古い名称です。
</note>
</dd>

<dt><kw>ltAlpha</kw> (<kw>ltTransparent</kw>)</dt>
<dd>
　ltAlpha はアルファ合成を行います。透過を行う際のもっとも基本的なタイプです。BMP や Susie plug-in からのアルファチャネルの入力においても下記の式が使われます。<r/>
<r/>
式 : <i>result</i> = blend(<i>dest</i>, <i>src</i>, <i>α</i>)<r/>
<note>
ltTransparent でも同じ意味になりますが、2.23 beta 2 未満における古い名称です。
</note>
</dd>

<dt><kw>ltAddAlpha</kw></dt>
<dd>
　ltAddAlpha は加算アルファ合成を行います。<r/>
　<link href="TPC" />でこの形式に適した画像を出力できます。また、<at href="f_Layer_convertType.html">Layer.convertType</at> メソッドで ltAlpha からこの形式に変換することができます。<r/>
　ltAddAlphaのレイヤは、ltAlpha のレイヤの直接の子になると正常に表示できません。<r/>
<r/>
式 : <i>result</i> = min(1.0, <i>dest</i> × ( 1.0 - <i>α</i> ) + <i>src</i>)<r/>
</dd>

<dt><kw>ltAdditive</kw></dt>
<dd>
　ltAdditive は加算合成を行います。光彩の表現に適しています。Photoshopにおける「覆い焼き(リニア)」ですが、Photoshopと同じ効果を得たい場合は後述の ltPsAdditive を使用してください。ltPsAdditive と違い、ltAdditive では <i>α</i>は無視されます。<r/>
　中性色 (重ね合わせても変化のない色) は黒です。<r/>
<r/>
式 : <i>result</i> = min(1.0, <i>dest</i> + <i>src</i>)<r/>
</dd>

<dt><kw>ltSubtractive</kw></dt>
<dd>
　ltSubtractive は減算合成を行います。<i>α</i>は無視されます。<r/>
　中性色は白です。<r/>
<r/>
式 : <i>result</i> = max(0.0, <i>dest</i> + <i>src</i> - 1.0)<r/>
<note>
　<i>result</i> = <i>dest</i> - <i>src</i> と違うのは src が反転しないかするかの違いだけです。
</note>
</dd>

<dt><kw>ltMultiplicative</kw></dt>
<dd>
　ltMultiplicative は乗算合成を行います。<i>α</i>は無視されます。<r/>
　中性色は白です。<r/>
<r/>
式 : <i>result</i> = <i>dest</i> × <i>src</i>
</dd>

<dt><kw>ltDodge</kw></dt>
<dd>
　ltDodge は「覆い焼き」合成を行います。光に照らされたものの表現に適しています。<i>α</i>は無視されます。<r/>
　中性色は黒です。<r/>
<r/>
式 : <i>result</i> = min(1.0, <i>dest</i> ÷ ( 1.0 -  <i>src</i> ) )<r/>
</dd>

<dt><kw>ltLighten</kw></dt>
<dd>
　ltLighten は「比較(明)」合成を行います。<i>α</i>は無視されます。<r/>
　中性色は黒です。<r/>
<r/>
式 : <i>result</i> = max(<i>dest</i>, <i>src</i>)<r/>
</dd>

<dt><kw>ltDarken</kw></dt>
<dd>
　ltDarken は「比較(暗)」合成を行います。<i>α</i>は無視されます。<r/>
　中性色は白です。<r/>
<r/>
式 : <i>result</i> = min(<i>dest</i>, <i>src</i>)<r/>
</dd>

<dt><kw>ltScreen</kw></dt>
<dd>
　ltLighten は「スクリーン乗算」合成を行います。<i>α</i>は無視されます。<r/>
　中性色は黒です。<r/>
<r/>
式 : <i>result</i> = 1.0 - ( 1.0 - <i>dest</i> ) × ( 1.0 - <i>src</i> )<r/>
</dd>



<dt><kw>ltPsNormal</kw></dt>
<dd>
　ltPsNormal は ltAlpha と同じ効果を持ちます。歴史的な理由で ltAlpha とは別のルーチンや名称となっています。
</dd>


<dt><kw>ltPsAdditive</kw></dt>
<dd>
　ltPsAdditive はPhotoshop互換の「覆い焼き(リニア)」合成(加算合成)を行います。ltAdditive と違い、<i>α</i>は無視されません。<r/>
　中性色は黒です。<r/>
<r/>
式 : <i>result</i> = blend(<i>dest</i>, min(1.0, <i>dest</i> + <i>src</i>), <i>α</i>)<r/>
</dd>

<dt><kw>ltPsSubtractive</kw></dt>
<dd>
　ltPsSubtractive はPhotoshop互換の「焼き込み(リニア)」合成(減算合成)を行います。ltSubtractive と違い、<i>α</i>は無視されません。<r/>
　中性色は白です。<r/>
<r/>
式 : <i>result</i> = blend(<i>dest</i>, max(0.0, <i>dest</i> + <i>src</i> - 1.0), <i>α</i>)<r/>
</dd>

<dt><kw>ltPsMultiplicative</kw></dt>
<dd>
　ltPsMultiplicative はPhotoshop互換の「乗算」合成を行います。ltMultiplicative と違い、<i>α</i>は無視されません。<r/>
　中性色は白です。<r/>
<r/>
式 : <i>result</i> = blend(<i>dest</i>, <i>dest</i> × <i>src</i>, <i>α</i>)<r/>
</dd>

<dt><kw>ltPsScreen</kw></dt>
<dd>
　ltPsScreen はPhotoshop互換の「スクリーン」合成を行います。ltScreen と違い、<i>α</i>は無視されません。<r/>
　中性色は黒です。<r/>
<r/>
式 : <i>result</i> = blend(<i>dest</i>, 1.0 - (1.0 - <i>dest</i>) × (1.0 - <i>src</i>), <i>α</i>)<r/>
</dd>


<dt><kw>ltPsOverlay</kw></dt>
<dd>
　ltPsOverlay はPhotoshop互換の「オーバーレイ」合成を行います。<r/>
　中性色は50%灰色です。<r/>
<r/>
式 : <i>result</i> = blend(<i>dest</i>, overlay(<i>dest</i>, <i>src</i>), <i>α</i>)<r/>
ここで overlay(<i>a</i>, <i>b</i>) = <r/>
　<i>a</i> × <i>b</i> × 2.0  ( <i>a</i> &lt; 0.5 のとき)<r/>
　1.0 - (1.0 - <i>a</i>) × (1.0 - <i>b</i>) × 2.0 (それ以外のとき)<r/>
</dd>

<dt><kw>ltPsHardLight</kw></dt>
<dd>
　ltPsHardLight はPhotoshop互換の「ハードライト」合成を行います。<r/>
　中性色は50%灰色です。<r/>
<r/>
式 : <i>result</i> = blend(<i>dest</i>, hardlight(<i>dest</i>, <i>src</i>), <i>α</i>)<r/>
ここで hardlight(<i>a</i>, <i>b</i>) = <r/>
　<i>a</i> × <i>b</i> × 2.0  (<i>b</i> &lt; 0.5 のとき)<r/>
　1.0 - (1.0 - <i>a</i>) × (1.0 - <i>b</i>) × 2.0 (それ以外のとき)<r/>
</dd>


<dt><kw>ltPsSoftLight</kw></dt>
<dd>
　ltPsSoftLight はPhotoshop互換の「ソフトライト」合成を行います。<r/>
　中性色は50%灰色です。<r/>
<r/>
式 : <i>result</i> = blend(<i>dest</i>, softlight(<i>dest</i>, <i>src</i>), <i>α</i>)<r/>
ここで softlight(<i>a</i>, <i>b</i>) = <r/>
　<i>a</i><sup>(0.5 ÷ <i>b</i>)</sup>  (<i>b</i> &lt; 0.5 のとき)<r/>
　<i>a</i><sup>((1.0 - <i>b</i>) ÷ 2)</sup>  (それ以外のとき)<r/>
</dd>


<dt><kw>ltPsColorDodge</kw></dt>
<dd>
　ltPsColorDodge はPhotoshop互換の「覆い焼きカラー」合成を行います。ltDodge と違い、<i>α</i>は無視されません。<r/>
　中性色は黒です。<r/>
<r/>
式 : <i>result</i> = blend(<i>dest</i>, min(1.0, <i>dest</i> ÷ ( 1.0 -  <i>src</i> ) ), <i>α</i>)<r/>
</dd>

<dt><kw>ltPsColorDodge5</kw></dt>
<dd>
　ltPsColorDodge はPhotoshopのバージョン 5.x 以下と互換の「覆い焼きカラー」合成を行います。ltPsColorDodge とは式が若干異なります。<r/>
　中性色は黒です。<r/>
<r/>
式 : <i>result</i> = min(1.0, <i>dest</i> ÷ ( 1.0 - <i>src</i> × <i>α</i>) )<r/>
</dd>

<dt><kw>ltPsColorBurn</kw></dt>
<dd>
　ltPsColorBurn はPhotoshop互換の「焼き込みカラー」合成を行います。<r/>
　中性色は白です。<r/>
<r/>
式 : <i>result</i> = blend(<i>dest</i>, max(0.0, 1.0 - (1.0 - <i>dest</i>) ÷ <i>src</i>), <i>α</i>)<r/>
</dd>

<dt><kw>ltPsLighten</kw></dt>
<dd>
　ltPsLighten はPhotoshop互換の「比較(明)」合成を行います。ltLighten と違い、<i>α</i>は無視されません。<r/>
　中性色は黒です。<r/>
<r/>
式 : <i>result</i> = blend(<i>dest</i>, max(<i>dest</i>, <i>src</i>), <i>α</i>)<r/>
</dd>

<dt><kw>ltPsDarken</kw></dt>
<dd>
　ltPsDarken はPhotoshop互換の「比較(暗)」合成を行います。ltDarken と違い、<i>α</i>は無視されません。<r/>
　中性色は白です。<r/>
<r/>
式 : <i>result</i> = blend(<i>dest</i>, min(<i>dest</i>, <i>src</i>), <i>α</i>)<r/>
</dd>

<dt><kw>ltPsDifference</kw></dt>
<dd>
　ltPsDifference はPhotoshop互換の「差の絶対値」合成を行います。<r/>
　中性色は黒です。<r/>
<r/>
式 : <i>result</i> = blend(<i>dest</i>, abs(<i>dest</i> - <i>src</i>), <i>α</i>)<r/>
</dd>

<dt><kw>ltPsDifference5</kw></dt>
<dd>
　ltPsDifference5 はPhotoshopのバージョン 5.x 以下と互換の「差の絶対値」合成を行います。ltPsDifference とは式が若干異なります。<r/>
　中性色は黒です。<r/>
<r/>
式 : <i>result</i> = abs(<i>dest</i> - <i>src</i> × <i>α</i>)<r/>
</dd>

<dt><kw>ltPsExclusion</kw></dt>
<dd>
　ltPsExclusion はPhotoshop互換の「除外」合成を行います。<r/>
　中性色は黒です。<r/>
<r/>
式 : <i>result</i> = blend(<i>dest</i>,  <i>dest</i> + <i>src</i> - 2.0 × <i>src</i> × <i>dest</i>, <i>α</i>)<r/>
</dd>



</dl>

</para>






<para>
<ptitle>アルファ合成と加算アルファ合成</ptitle>
　吉里吉里は、二つのアルファ合成モードを持っています。<r/>
<dl>
<dt>アルファ合成</dt>
<dd>
<at href="f_Layer_type.html">Layer.type</at> プロパティで <kw>ltAlpha</kw> を指定するとこの表示タイプになります。<r/>
ltAlphaは多くのグラフィックソフトが採用しているアルファ合成モードです。他のグラフィックソフトで出力したデータをそのまま読み込む場合はこのモードが適しています。<r/>
</dd>

<dt>加算アルファ合成</dt>
<dd>
<at href="f_Layer_type.html">Layer.type</at> プロパティで <kw>ltAddAlpha</kw> を指定するとこの表示タイプになります。<r/>
　この形式はアルファ合成に比べて以下のメリット・デメリットがあります。<r/>
<ul>
<li>式がアルファ合成よりも単純なため、表示が高速に行え、多くの描画メソッドでも高速な描画が可能です</li>
<li>アルファ合成と一緒に加算合成も表現できます</li>
<li>この形式に対応しているグラフィックソフトがほとんどありません</li>
</ul>
<r/>
ltAddAlphaと同じ合成モードに対応しているグラフィックソフトはそうはないと思いますので、他ソフトの出力を吉里吉里でこの形式で扱うには、<link href="TPC" /> でこのタイプの画像を出力するか、<at href="f_Layer_convertType.html">Layer.convertType</at> メソッドで ltAlpha からこの形式に変換する必要があります。<r/>
　画像フォーマットコンバータでは、Photoshop形式で、「通常」レイヤーと「覆い焼き(リニア)」レイヤーの組み合わさった入力を、加算アルファ合成用画像の入力として受け付けることができます。<r/>
</dd>

</dl>

</para>






<para>
<ptitle>レイヤタイプと描画方式と演算モード</ptitle>
　吉里吉里にはレイヤタイプ (ltで始まる定数で指定)と、描画方式 (dfで始まる定数で指定) と、演算モード (omで始まる定数で指定)があります。<r/>
　それぞれ似たような名称を持っていますが、用途は以下のように分かれています。<r/>
<dl>

<dt>レイヤタイプ</dt>
<dd>
　レイヤタイプは <at href="f_Layer_type.html">Layer.type</at> プロパティで指定する値で、レイヤがどのように表示されるかを指定します。
</dd>

<dt>描画方式</dt>
<dd>
　描画方式は <at href="f_Layer_face.html">Layer.face</at> プロパティで指定する値で、レイヤにどのように描画するかを指定します。dfAutoを指定すると、レイヤタイプに従って適切な描画方式が決定されます。レイヤタイプに最適な描画方法とは異なる描画方式で描画することもできます。<r/>
　<at href="f_Layer_copyRect.html">Layer.copyRect</at> メソッドのようなレイヤ間のコピーを行うメソッドでは、どの情報をコピーするかの選択にも用いられます。dfBoth (あるいは dfAlpha あるいは dfAddAlpha の場合) は、メインとマスクの両方がコピーされます。dfMain (あるいは dfOpaque) の場合はメインのみがコピーされます。dfMask の場合はマスクのみ、dfProvince の場合は領域画像のみがコピーされます。<r/>
　同様に、<at href="f_Layer_fillRect.html">Layer.fillRect</at> メソッドでは、どの情報を塗りつぶすかの選択に用いられます。dfBoth (あるいは dfAlpha あるいは dfAddAlpha の場合) は、メインとマスクの両方が塗りつぶされます。dfMain (あるいは dfOpaque) の場合はメインのみがコピー塗りつぶされます。dfMask の場合はマスクのみ、dfProvince の場合は領域画像のみが塗りつぶされます。<r/>
</dd>

<dt>演算モード</dt>
<dd>
　演算モードは <at href="f_Layer_operateRect.html">Layer.operateRect</at> メソッドなどの引数で指定する値で、演算元(重ね合わせるレイヤ) をどのように扱うかを指定する値です。omAuto を指定すると、演算元のレイヤタイプに従って適切なモードが決定されます。
</dd>

</dl>
</para>


<para>
<ptitle>アルファチャンネルの保護</ptitle>
　<at href="f_Layer_face.html">Layer.face</at> プロパティで指定する描画方式が <kw>dfOpaque</kw> の場合、<at href="f_Layer_holdAlpha.html">Layer.holdAlpha</at> プロパティで、描画先 (メソッドを実行しようとするレイヤ)のアルファチャンネルを保護するかどうかを指定できます。<r/>
　アルファチャンネルを保護すると、アルファチャンネル (不透明度) は保護され、透明な部分は透明なままになります。<r/>
　アルファチャンネルを保護しないと、アルファチャンネル (不透明度) は破壊されます。破壊されるとは、どのような状態になるか分からなくなると言うことです。<r/>
　しかし、<at href="f_Layer_type.html">Layer.type</at> プロパティが <kw>ltAlpha</kw> でも <kw>ltAddAlpha</kw> でも無い場合は、レイヤのアルファチャンネルは使われませんから、Layer.holdAlpha プロパティを偽にしても、通常は問題はありません。また、偽にすれば、多くのメソッドにおいて真の時よりも高速に描画できます。<r/>
</para>


</doc>
