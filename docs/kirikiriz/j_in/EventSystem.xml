<?xml version="1.0" encoding="Shift_JIS" ?>
<doc>
<title>イベントシステム</title>

<para>
<ptitle>イベントシステムについて</ptitle>
　吉里吉里で TJS スクリプトを記述する場合、イベント駆動型のプログラミングモデルを採る必要があります。<r/>
　イベントは「何かが起こった」ときに、他のオブジェクトや、自分のオブジェクト内にそれを通知するために発生します。イベントハンドラにはこれに応答する処理を書くことになります。<r/>
　吉里吉里では一つのイベントハンドラで必要以上に長い時間がかかることは好ましくありません。時間を待ちたいときは <at href="f_Timer.html">Timer</at> クラスを用いることをおすすめします。<r/>
</para>

<para>
<ptitle>同期イベントと非同期イベント</ptitle>
　同期イベントとは、たとえばサウンドバッファで再生を開始した場合に、その play メソッド内で onStatusChanged イベントが発生するように、オブジェクトの操作を行うとすぐにその場で発生するイベントです。<r/>
　これに対し、非同期イベントとは、吉里吉里内部にあるイベントキュー ( 発生させるイベントを一時保管している場所 ) に一時的に蓄積されます。このイベントはすべての他のイベントハンドラの処理が終わるまで発生せず、他のイベントハンドラ内では発生しません(ただし例外があるので下記 note を参照してください)。タイマー周期が来て発生する onTimer イベントなどや、ユーザからの入力により発生するすべてのイベントは非同期イベントです。<r/>
<note>
　Window.showModal のような一部の、ユーザからの入力を得ようとするような機能は、イベントキューを動作させる (イベントを配信する) ことがあります。これにより、イベントハンドラ中で別の非同期イベントが発生する可能性はあります。
</note>
　非同期イベントをスクリプトの操作で発生させるために <at href="f_AsyncTrigger.html">AsyncTrigger</at> クラスがあります。<r/>
</para>

<para>
<ptitle>画面反映のタイミング</ptitle>
　ウィンドウにレイヤを表示するための画面反映のタイミングは非同期イベントと同じで、すべての他のイベントハンドラの処理が行われたあとです。一つのイベントハンドラ内で何度描画を行っても、内部的な画像バッファには描画されていますが、画面にはすぐに反映はされません。イベントハンドラからぬけて、吉里吉里が描画のタイミングを得たときに初めてウィンドウに内容が描画され、反映されます。<r/>
</para>

<para>
<ptitle>クラス内でのイベントハンドラ</ptitle>
　クラス内で発生したイベントはそのクラス内で、スーパークラスのイベントハンドラをオーバーライドすることによりハンドリングする事ができます。<r/>
　たとえば、Timer クラスからサブクラスを作成し、以下のようにイベントハンドラを作成することができます。<r/>
<bq>
class MyTimer extends Timer<r/>
{<r/>
	function MyTimer()<r/>
	{<r/>
		super.Timer(...);<r/>
	}<r/>
<r/>
	function onTimer()<r/>
	{<r/>
		// ( ここに onTimer の処理 )<r/>
		super.onTimer(...); // スーパークラスのメソッドは一応呼び出す<r/>
	}<r/>
}<r/>
</bq>
　スーパークラスのメソッドは呼び出す必要はありませんが、一般的には呼び出します。また、スーパークラスのメソッドは呼ばないと後述の action メソッドによるイベントハンドリングができません。<r/>
</para>

<para>
<ptitle>actionメソッド</ptitle>
　<at href="f_Layer.html">Layer</at> クラスや <at href="f_WaveSoundBuffer.html">WaveSoundBuffer</at> クラスなどは、コンストラクタに指定したオーナーの action メソッドにイベントを発生する機能があります。<r/>
　action メソッドには辞書配列オブジェクトの引数が一つ渡され、ここにイベントの情報が入っています。<r/>
　辞書配列のメンバのうち、 target はイベントの発生元オブジェクトを表しています。type はイベント名を表しています。<r/>
　その他のメンバはイベントによって異なります。たとえば、<at href="f_Layer_onClick.html">Layer.onClick</at> イベントならば、x と y というメンバがあり、レイヤ上をクリックされた場所を表します。<r/>
<bq>
例:<r/>
class MyWindow extends Window<r/>
{<r/>
	var layer;<r/>
	(略)<r/>
	function MyWindow()<r/>
	{<r/>
		super.Window(...);<r/>
		add(layer = new Layer(this /* this = オーナー */, null));<r/>
		layer.visible = true;<r/>
	}<r/>
	(略)<r/>
	function action(ev)<r/>
	{<r/>
		if(ev.type == "onClick" &amp;&amp; ev.target == layer)<r/>
		{<r/>
			// layer がクリックされた<r/>
			System.inform(ev.x, ev.y);<r/>
		}<r/>
	}<r/>
}<r/>
</bq>
</para>

</doc>
